{"version":3,"sources":["serviceWorker.ts","pages/trends/index.tsx","App.tsx","pages/trends/WhyWeNeedMoney.tsx","routing.ts","index.tsx"],"names":["Boolean","window","location","hostname","match","wrapperStyle","css","Trends","href","globalStyle","fontSize","style","tooManyStyle","Title","count","clicked","TooMany","App","useState","setClicked","clickedCount","increaseClickedCount","Helmet","styles","onClick","className","WhyWeNeedMoney","routes","mount","route","view","ReactDOM","render","fallback","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"wMAYoBA,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,0UCbN,IAAMC,EAAeC,YAAH,KAwBHC,EAhBc,WAC3B,OACE,mBAAKD,IAAKD,GACR,YAAC,IAAD,CAAMG,KAAI,QAAV,mDACA,iBACEF,IAAKA,YAAF,KAGHE,KAAK,8CAJP,8G,w8BCXN,IAAMC,EAAcH,YAAH,KAMXI,EAAWJ,YAAH,KAIRK,EAAQL,YAAH,IACPI,GAYEE,EAAeN,YAAH,IACdI,GAMEL,EAAeC,YAAH,KAgBZO,EAAyB,SAAC,GAAwB,IAAtBC,EAAqB,EAArBA,MAAOC,EAAc,EAAdA,QACvC,OAAID,EAHiB,GAKjB,mBAAKR,IAAKK,GAASI,EAA2B,kBAAjB,gBAG1B,MAGHC,EAA2B,SAAC,GAAe,IAAbF,EAAY,EAAZA,MAClC,OAAIA,GAZiB,GAcjB,mBAAKR,IAAKM,GAAV,yBAEE,mBACEN,IAAKA,YAAF,MAKFQ,EANH,eAWC,MA2BMG,EAxBO,WAAO,IAAD,EACIC,oBAAS,GADb,mBACnBH,EADmB,KACVI,EADU,OAEmBD,mBAAS,GAF5B,mBAEnBE,EAFmB,KAELC,EAFK,KAS1B,OACE,uBACE,YAACC,EAAA,OAAD,KACE,0CAEF,YAAC,IAAD,CAAQC,OAAQd,IAChB,mBAAKe,QAXY,WACnBL,GAAYJ,GACZM,EAAqBD,EAAe,IASNd,IAAKD,EAAcoB,UAAU,OACvD,YAAC,EAAD,CAAOX,MAAOM,EAAcL,QAASA,IACrC,YAAC,EAAD,CAASD,MAAOM,EAAcL,QAASA,IACvC,YAAC,EAAD,SChFOW,EAfe,WAC5B,OACE,uBACE,2CACA,qUAGA,2LACA,iMACA,iJACA,2KCTOC,EAASC,YAAM,CAC1B,IAAKC,YAAM,CACTC,KAAMb,IAER,OAAQY,YAAM,CACZC,KAAMJ,MCFVK,IAASC,OACP,kBAAC,IAAD,CAAQL,OAAQA,GACd,kBAAC,WAAD,CAAUM,SAAU,MAClB,kBAAC,IAAD,QAGJC,SAASC,eAAe,SL4HpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.b55aea3f.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","/** @jsx jsx */\nimport { jsx, css } from \"@emotion/core\";\nimport React from \"react\";\nimport { Link } from \"react-navi\";\n\nconst wrapperStyle = css`\n  margin-top: 10vw;\n  background: whitesmoke;\n  color: gray;\n  display: flex;\n  flex-direction: column;\n`;\n\nconst Trends: React.FC<{}> = () => {\n  return (\n    <div css={wrapperStyle}>\n      <Link href={`/why`}>なぜ今 makeMoney なのか</Link>\n      <a\n        css={css`\n          color: gray;\n        `}\n        href=\"https://github.com/hasura/3factor-example/\"\n      >\n        今 Hasura が金になりそうな気がしている。\n      </a>\n    </div>\n  );\n};\n\nexport default Trends;\n","/** @jsx jsx */\nimport { jsx, css, Global } from \"@emotion/core\";\nimport React, { useState } from \"react\";\nimport { Helmet } from \"react-helmet\";\nimport Trends from \"~/pages/trends\";\n\nconst globalStyle = css`\n  body {\n    background: #113130;\n  }\n`;\n\nconst fontSize = css`\n  font-size: 9vw;\n`;\n\nconst style = css`\n  ${fontSize};\n  color: Blue;\n  font-weight: bold;\n  border-bottom: 10px blue double;\n  transition: 0.5s;\n\n  &:hover {\n    color: greenyellow;\n    border-bottom: 10px yellowgreen double;\n  }\n`;\n\nconst tooManyStyle = css`\n  ${fontSize};\n  color: red;\n  font-weight: bold;\n  border-bottom: 10px red double;\n`;\n\nconst wrapperStyle = css`\n  user-select: none;\n  height: 90vh;\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n`;\n\ntype Props = {\n  count: number;\n  clicked: boolean;\n};\n\nconst countThreshold = 10;\n\nconst Title: React.FC<Props> = ({ count, clicked }) => {\n  if (count < countThreshold) {\n    return (\n      <div css={style}>{!clicked ? \"MakeMoney.TS\" : \"You need Money.\"}</div>\n    );\n  }\n  return null;\n};\n\nconst TooMany: React.FC<Props> = ({ count }) => {\n  if (count >= countThreshold) {\n    return (\n      <div css={tooManyStyle}>\n        You clicked too Money.\n        <div\n          css={css`\n            font-size: 36px;\n            text-align: center;\n          `}\n        >\n          {count} times~!!!\n        </div>\n      </div>\n    );\n  }\n  return null;\n};\n\nconst App: React.FC = () => {\n  const [clicked, setClicked] = useState(false);\n  const [clickedCount, increaseClickedCount] = useState(0);\n\n  const moneyClicked = () => {\n    setClicked(!clicked);\n    increaseClickedCount(clickedCount + 1);\n  };\n\n  return (\n    <div>\n      <Helmet>\n        <title>MakeMoney.TS</title>\n      </Helmet>\n      <Global styles={globalStyle} />\n      <div onClick={moneyClicked} css={wrapperStyle} className=\"App\">\n        <Title count={clickedCount} clicked={clicked} />\n        <TooMany count={clickedCount} clicked={clicked} />\n        <Trends />\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n","/** @jsx jsx */\nimport { jsx } from \"@emotion/core\";\n\nexport const WhyWeNeedMoney = () => {\n  return (\n    <div>\n      <h2>Why We Need Money</h2>\n      <p>\n        常識的に考えて、俺たちは別に趣味でプログラミングをしているわけじゃないから、高い報酬を得た方がいい。\n      </p>\n      <p>そのためには何が必要なのか、かんがえなくちゃいけない。</p>\n      <p>簡単に言えば、アプリケーションを早く、堅牢に作ればいい。</p>\n      <p>それがエンジニアに求められていることだ。</p>\n      <p>勉強会で勉強すべきことって、そういうことだろう？</p>\n    </div>\n  );\n};\n\nexport default WhyWeNeedMoney;\n","import { mount, route } from \"navi\";\nimport App from \"~/App\";\nimport WhyWeNeedMoney from \"~/pages/trends/WhyWeNeedMoney\";\n\nexport const routes = mount({\n  \"/\": route({\n    view: App\n  }),\n  \"/why\": route({\n    view: WhyWeNeedMoney\n  })\n});\n","import React, { Suspense } from \"react\";\nimport ReactDOM from \"react-dom\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nimport { Router, View } from \"react-navi\";\nimport { routes } from \"~/routing\";\n\nReactDOM.render(\n  <Router routes={routes}>\n    <Suspense fallback={null}>\n      <View />\n    </Suspense>\n  </Router>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}